# import libs
import logging
from typing import Any, Dict, Literal, List
from pythermodb_settings.models import Component, Temperature, Pressure
from pythermodb_settings.utils import set_component_id
from pyThermoLinkDB.models import ModelSource
# local
from ..docs import ThermoModelCore
from ..utils import (
    set_feed_specification,
    parse_gas_fugacity_calc_result,
    parse_liquid_fugacity_calc_result,
    parse_mixture_fugacity_calc_result
)
from ..models import ComponentGasFugacityResult, ComponentLiquidFugacityResult, MixtureGasFugacityResult


# NOTE: logger
logger = logging.getLogger(__name__)


def check_component_eos_roots(
    component: Component,
    pressure: Pressure,
    temperature: Temperature,
    model_source: ModelSource,
    model_name: Literal[
        'SRK', 'PR', 'vdW', 'RK'
    ] = 'SRK',
    component_key: Literal[
        "Name-State", "Formula-State"
    ] = "Name-State",
    **kwargs
):
    '''
    Check component eos roots using the specified equation of state model.

    Parameters
    ----------
    component: Component
        Component object containing information about the chemical component.
    pressure: Pressure
        Pressure and a unit.
    temperature: Temperature
        Temperature and a unit.
    model_source: ModelSource
        datasource and equationsource needed for fugacity calculation
            - datasource: dict, datasource for the component (`generated by PyThermoDB`)
            - equationsource: dict, equationsource for the component (`generated by PyThermoDB`)
    model_name: str
        eos model name,
            - `SRK`: Soave-Redlich-Kwong
            - `PR`: Peng-Robinson
            - `vdW`: Van der Waals
            - `RK`: Redlich-Kwong
    component_key: str
        component key type, options are:
            - `Name-State`: component name with state (default)
            - `Formula-State`: component formula with state
    **kwargs: Optional[Dict]
        additional arguments
            - tolerance: float, tolerance for the calculation (default: 1e-1)
            - phase: str, phase type, options are `VAPOR`, `LIQUID`, `VAPOR-LIQUID`, `SUPERCRITICAL` (default: None)

    Returns
    -------
    res: dict
        eos root analysis

    Notes
    -----
    The phase of the component is determined based on the temperature and pressure provided in the model_input.

    1. At T < Tc and P = Psat, 3 real roots → smallest is liquid, largest is vapor (vapor-liquid).
    2. At T < Tc and P > Psat, EOS may give 1 or 3 roots → use smallest (liquid).
    3. At T < Tc and P < Psat, EOS may give 1 or 3 roots → use largest (vapor).
    4. At T = Tc, one real root (critical point) → fluid is at critical state.
    5. At T > Tc, only 1 real root → fluid is supercritical (vapor-like or liquid-like).

    Pressure and temperature are in SI units (Pa, K), if not provided in the model_input, they are automatically converted.

    References
    ----------
    1. Introductory Chemical Engineering Thermodynamics
    '''
    try:
        # SECTION: validate inputs
        # ! component
        if not isinstance(component, Component):
            raise ValueError(
                "Invalid component input. Must be a Component object.")
        # ! pressure
        if not isinstance(pressure, Pressure):
            raise ValueError(
                "Invalid pressure input. Must be a Pressure object.")
        # ! temperature
        if not isinstance(temperature, Temperature):
            raise ValueError(
                "Invalid temperature input. Must be a Temperature object.")
        # ! model source
        if not isinstance(model_source, ModelSource):
            raise ValueError(
                "Invalid model_source input. Must be a ModelSource object.")

        # NOTE: kwargs
        # phase
        phase = kwargs.get('phase', None)

        # SECTION: initialize eos core
        try:
            # NOTE: thermo manager
            ThermoModelCore_ = ThermoModelCore()
            # NOTE: eos core
            eosCore = ThermoModelCore_.init_eos(**kwargs)
        except Exception as e:
            logger.error(f"Initialization failed!, {e}")
            raise

        # SECTION: input preparation
        try:
            # NOTE component id configuration
            # set component id
            component_id: str = set_component_id(
                component=component,
                component_key=component_key
            )

            # model input
            model_input = {
                "phase": phase,
                "component": component_id,
                "pressure": [pressure.value, pressure.unit],
                "temperature": [temperature.value, temperature.unit],
            }

            # model source
            model_source_dict = {
                "datasource": model_source.data_source,
                "equationsource": model_source.equation_source
            }
        except Exception as e:
            logger.error(f"Input preparation failed!, {e}")
            raise

        # SECTION: calculation
        try:
            # NOTE: gas fugacity calculation method
            res = eosCore.check_eos_roots_single_component(
                model_name=model_name,
                model_input=model_input,
                model_source=model_source_dict,
                **kwargs
            )
            return res
        except Exception as e:
            logger.error(f"Calculation failed!, {e}")
            raise
    except Exception as e:
        logger.error(f"Checking eos roots failed!, {e}")
        raise


def check_multi_component_eos_roots(
    components: List[Component],
    pressure: Pressure,
    temperature: Temperature,
    model_source: ModelSource,
    model_name: Literal[
        'SRK', 'PR', 'vdW', 'RK'
    ] = 'SRK',
    bubble_point_pressure_mode: Literal[
        "Raoult"
    ] = "Raoult",
        dew_point_pressure_mode: Literal[
            "Raoult"
    ] = "Raoult",
    component_key: Literal[
        "Name-State", "Formula-State"
    ] = "Name-State",
    **kwargs
):
    '''
    Check multi-component eos roots using the specified equation of state model.

    Parameters
    ----------
    components: List[Component]
        component object list containing component information as:
            - name: str,
            - formula: str,
            - state: str, `g`: gas, `l`: liquid, `s`:
            - mole_fraction: float, mole fraction of the component in the mixture
    pressure: Pressure
        Pressure and a unit.
    temperature: Temperature
        Temperature and a unit.
    model_source: ModelSource
        datasource and equationsource needed for fugacity calculation
            - datasource: dict, datasource for the component (`generated by PyThermoDB`)
            - equationsource: dict, equationsource for the component (`generated by PyThermoDB`)
    model_name: str
        eos model name,
            - `SRK`: Soave-Redlich-Kwong
            - `PR`: Peng-Robinson
            - `vdW`: Van der Waals
            - `RK`: Redlich-Kwong
    bubble_point_pressure_mode: str
        bubble point pressure calculation mode,
            - `Raoult`: Raoult's law (default)
    dew_point_pressure_mode: str
        dew point pressure calculation mode,
            - `Raoult`: Raoult's law (default)
    component_key: str
        component key type, options are:
            - `Name-State`: component name with state (default)
            - `Formula-State`: component formula with state
    **kwargs: Optional[Dict]
        additional arguments
            - tolerance: float, tolerance for the calculation (default: 1e-1)

    Notes
    -----
    * The phase of the component is determined based on the temperature and pressure provided in the model_input.

    1. At T < Tc and P = Psat, 3 real roots → smallest is liquid, largest is vapor (vapor-liquid).
    2. At T < Tc and P > Psat, EOS may give 1 or 3 roots → use smallest (liquid).
    3. At T < Tc and P < Psat, EOS may give 1 or 3 roots → use largest (vapor).
    4. At T = Tc, one real root (critical point) → fluid is at critical state.
    5. At T > Tc, only 1 real root → fluid is supercritical (vapor-like or liquid-like).

    * Pressure and temperature are in SI units (Pa, K), if not provided in the model_input, they are automatically converted.

    * Raoult's law analysis does not inherently account for the critical point of the mixture (or even of individual components). It's based on assumptions that:

    - The liquid behaves ideally (activity coefficients = 1)
    - The vapor behaves ideally (fugacity coefficients = 1)
    - It is far from the critical point, where such assumptions break down
    '''
    try:
        # SECTION: validate inputs
        # ! components
        if not isinstance(components, list) or not all(isinstance(c, Component) for c in components):
            raise ValueError(
                "Invalid components input. Must be a list of Component objects.")
        if len(components) == 0:
            raise ValueError("Components list is empty.")
        # ! pressure
        if not isinstance(pressure, Pressure):
            raise ValueError(
                "Invalid pressure input. Must be a Pressure object.")
        # ! temperature
        if not isinstance(temperature, Temperature):
            raise ValueError(
                "Invalid temperature input. Must be a Temperature object.")
        # ! model source
        if not isinstance(model_source, ModelSource):
            raise ValueError(
                "Invalid model_source input. Must be a ModelSource object.")

        # NOTE: kwargs
        # phase
        phase = kwargs.get('phase', None)

        # SECTION: initialize eos core
        try:
            # NOTE: thermo manager
            ThermoModelCore_ = ThermoModelCore()
            # NOTE: eos core
            eosCore = ThermoModelCore_.init_eos(**kwargs)
        except Exception as e:
            logger.error(f"Initialization failed!, {e}")
            raise

        # SECTION: input preparation
        try:
            # feed specification
            feed_spec: Dict[str, float] = set_feed_specification(
                components=components,
                component_key=component_key
            )

            # model input
            model_input = {
                "feed-specification": feed_spec,
                "pressure": [pressure.value, pressure.unit],
                "temperature": [temperature.value, temperature.unit],
            }

            # model source
            model_source_dict = {
                "datasource": model_source.data_source,
                "equationsource": model_source.equation_source
            }
        except Exception as e:
            logger.error(f"Input preparation failed!, {e}")
            raise

        # SECTION: calculation
        try:
            # NOTE: gas fugacity calculation method
            res = eosCore.check_eos_roots_multi_component(
                model_name=model_name,
                model_input=model_input,
                model_source=model_source_dict,
                bubble_point_pressure_mode=bubble_point_pressure_mode,
                dew_point_pressure_mode=dew_point_pressure_mode,
                component_key=component_key,
                **kwargs
            )

            # return
            return res
        except Exception as e:
            logger.error(f"Calculation failed!, {e}")
            raise

    except Exception as e:
        logger.error(f"Checking eos roots failed!, {e}")
        raise


def calc_gas_fugacity(
    component: Component,
    pressure: Pressure,
    temperature: Temperature,
    model_source: ModelSource,
    model_name: Literal[
        'SRK', 'PR', 'RK', 'vdW'
    ] = 'SRK',
    solver_method: Literal[
        'ls', 'newton', 'fsolve', 'root'
    ] = 'ls',
    component_key: Literal[
        "Name-State", "Formula-State"
    ] = "Name-State",
    phase_names: List[
        Literal['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']
    ] = ['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID'],
    **kwargs
) -> ComponentGasFugacityResult:
    """
    Calculate the gas fugacity using the specified equation of state model.

    Parameters
    ----------
    component: Component
        Component object containing information about the chemical component.
    pressure: Pressure
        Pressure and a unit.
    temperature: Temperature
        Temperature and a unit.
    model_source: ModelSource
        datasource and equationsource needed for fugacity calculation
            - datasource: dict, datasource for the component (`generated by PyThermoDB`)
            - equationsource: dict, equationsource for the component (`generated by PyThermoDB`)
    model_name: str
        eos model name,
            - `SRK`: Soave-Redlich-Kwong
            - `PR`: Peng-Robinson
            - `vdW`: Van der Waals
            - `RK`: Redlich-Kwong
    model_input: dict
        model input
            - `phase` (Optional): str, `VAPOR`: vapor phase, `LIQUID`: liquid phase, `VAPOR-LIQUID`: vapor-liquid phase, `SUPERCRITICAL`: supercritical phase
            - `pressure`: list, pressure and a unit, such as `[1.2*1e5, 'Pa']`
            - `temperature`: list, temperature and a unit, such as `[300, 'K']`
    solver_method: str
        solver method as:
            - `ls`: least square method (default)
            - `root`: root method
            - `newton`: newton method
            - `fsolve`: fsolve method
    component_key: str
        component key type, options are:
            - `Name-State`: component name with state (default)
            - `Formula-State`: component formula with state
    phase_names: List[Literal['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']]
        list of phase names to consider in the calculation, e.g., ['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']
    **kwargs: Optional[Dict]
        additional arguments
            - tolerance: float, tolerance for the calculation (default: 1e-1)
            - phase: str, phase type, options are `VAPOR`, `LIQUID`, `VAPOR-LIQUID`, `SUPERCRITICAL` (default: None)

    Returns
    -------
    ComponentGasFugacityResult
        A dictionary containing the calculated fugacity coefficients and related information.

    Notes
    -----
    ### solver_method:
        - `ls`: least square method (default)
        - `newton`: newton method
        - `fsolve`: fsolve method
        - `root`: root method

    ### root_analysis_set:

    root analysis set, `None`: default (calculation performed according to phase provided), `1`: 3 roots (VAPOR-LIQUID), `2`: 1 root (LIQUID), `3`: 1 root (VAPOR), `4`: 1 root (SUPERCRITICAL). Otherwise, eos root analysis is performed to determine the phase of the component at the provided operating conditions including temperature and pressure.

        - set [1]: 3 roots (VAPOR-LIQUID)
            - At `T < Tc` and `P = Psat`, 3 real roots → smallest is liquid, largest is vapor.
        - set [2]: 1 root (LIQUID)
            - At `T < Tc` and `P > Psat`, EOS may give 1 or 3 roots → use smallest (liquid).
        - set [3]: 1 root (VAPOR)
            - At `T < Tc` and `P < Psat`, EOS may give 1 or 3 roots → use largest (vapor).
        - set [4]: 1 root (SUPERCRITICAL)
            - At `T > Tc`, only 1 real root → fluid is supercritical (vapor-like or liquid-like).

    ### phase determination:

    The phase of the component is determined based on the temperature and pressure provided in the model_input.
    """
    try:
        # SECTION: validate inputs
        # ! component
        if not isinstance(component, Component):
            raise ValueError(
                "Invalid component input. Must be a Component object.")
        # ! pressure
        if not isinstance(pressure, Pressure):
            raise ValueError(
                "Invalid pressure input. Must be a Pressure object.")
        # ! temperature
        if not isinstance(temperature, Temperature):
            raise ValueError(
                "Invalid temperature input. Must be a Temperature object.")
        # ! model source
        if not isinstance(model_source, ModelSource):
            raise ValueError(
                "Invalid model_source input. Must be a ModelSource object.")

        # NOTE: kwargs
        # phase
        phase = kwargs.get('phase', None)

        # SECTION: initialize eos core
        try:
            # NOTE: thermo manager
            ThermoModelCore_ = ThermoModelCore()
            # NOTE: eos core
            eosCore = ThermoModelCore_.init_eos(**kwargs)
        except Exception as e:
            logger.error(f"Initialization failed!, {e}")
            raise

        # SECTION: input preparation
        try:
            # NOTE component id configuration
            # set component id
            component_id: str = set_component_id(
                component=component,
                component_key=component_key
            )

            # model input
            model_input = {
                "phase": phase,
                "component": component_id,
                "pressure": [pressure.value, pressure.unit],
                "temperature": [temperature.value, temperature.unit],
            }

            # model source
            model_source_dict = {
                "datasource": model_source.data_source,
                "equationsource": model_source.equation_source
            }
        except Exception as e:
            logger.error(f"Input preparation failed!, {e}")
            raise

        # SECTION: calculation
        try:
            # NOTE: gas fugacity calculation method
            res = eosCore.cal_fugacity(
                model_name=model_name,
                model_input=model_input,
                model_source=model_source_dict,
                solver_method=solver_method,
                **kwargs
            )

            # ! parse result
            res = parse_gas_fugacity_calc_result(
                res=res,
                phase_names=phase_names
            )

            return res
        except Exception as e:
            logger.error(f"Calculation failed!, {e}")
            raise
    except Exception as e:
        logger.error(f"Gas fugacity calculation failed!, {e}")
        raise


def calc_liquid_fugacity(
    component: Component,
    pressure: Pressure,
    temperature: Temperature,
    model_source: ModelSource,
    model_name: Literal[
        'SRK', 'PR', 'RK', 'vdW'
    ] = 'SRK',
    solver_method: Literal[
        'ls', 'newton', 'fsolve', 'root'
    ] = 'ls',
    liquid_fugacity_mode: Literal[
        'EOS', 'Poynting'
    ] = 'EOS',
    component_key: Literal[
        "Name-State", "Formula-State"
    ] = "Name-State",
    phase_names: List[
        Literal['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']
    ] = ['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID'],
    **kwargs
) -> ComponentLiquidFugacityResult:
    """
    Calculate the gas fugacity using the specified equation of state model.

    Parameters
    ----------
    component: Component
        Component object containing information about the chemical component.
    pressure: Pressure
        Pressure and a unit.
    temperature: Temperature
        Temperature and a unit.
    model_source: ModelSource
        datasource and equationsource needed for fugacity calculation
            - datasource: dict, datasource for the component (`generated by PyThermoDB`)
            - equationsource: dict, equationsource for the component (`generated by PyThermoDB`)
    model_name: str
        eos model name,
            - `SRK`: Soave-Redlich-Kwong
            - `PR`: Peng-Robinson
            - `vdW`: Van der Waals
            - `RK`: Redlich-Kwong
    model_input: dict
        model input
            - `phase` (Optional): str, `VAPOR`: vapor phase, `LIQUID`: liquid phase, `VAPOR-LIQUID`: vapor-liquid phase, `SUPERCRITICAL`: supercritical phase
            - `pressure`: list, pressure and a unit, such as `[1.2*1e5, 'Pa']`
            - `temperature`: list, temperature and a unit, such as `[300, 'K']`
    solver_method: str
        solver method as:
            - `ls`: least square method (default)
            - `root`: root method
            - `newton`: newton method
            - `fsolve`: fsolve method
    liquid_fugacity_mode: str
        liquid fugacity method,
            - `Poynting`: Poynting method (soon)
            - `EOS`: Equation of state (lowest Z)
    component_key: str
        component key type, options are:
            - `Name-State`: component name with state (default)
            - `Formula-State`: component formula with state
    phase_names: List[Literal['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']]
        list of phase names to consider in the calculation, e.g., ['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']
    **kwargs: Optional[Dict]
        additional arguments
            - tolerance: float, tolerance for the calculation (default: 1e-1)
            - phase: str, phase type, options are `VAPOR`, `LIQUID`, `VAPOR-LIQUID`, `SUPERCRITICAL` (default: None)

    Returns
    -------
    ComponentLiquidFugacityResult
        A dictionary containing the calculated fugacity coefficients and related information.

    Notes
    -----
    ### solver_method:
        - `ls`: least square method (default)
        - `newton`: newton method
        - `fsolve`: fsolve method
        - `root`: root method

    ### root_analysis_set:

    root analysis set, `None`: default (calculation performed according to phase provided), `1`: 3 roots (VAPOR-LIQUID), `2`: 1 root (LIQUID), `3`: 1 root (VAPOR), `4`: 1 root (SUPERCRITICAL). Otherwise, eos root analysis is performed to determine the phase of the component at the provided operating conditions including temperature and pressure.

        - set [1]: 3 roots (VAPOR-LIQUID)
            - At `T < Tc` and `P = Psat`, 3 real roots → smallest is liquid, largest is vapor.
        - set [2]: 1 root (LIQUID)
            - At `T < Tc` and `P > Psat`, EOS may give 1 or 3 roots → use smallest (liquid).
        - set [3]: 1 root (VAPOR)
            - At `T < Tc` and `P < Psat`, EOS may give 1 or 3 roots → use largest (vapor).
        - set [4]: 1 root (SUPERCRITICAL)
            - At `T > Tc`, only 1 real root → fluid is supercritical (vapor-like or liquid-like).
    """
    try:
        # SECTION: validate inputs
        # ! component
        if not isinstance(component, Component):
            raise ValueError(
                "Invalid component input. Must be a Component object.")
        # ! pressure
        if not isinstance(pressure, Pressure):
            raise ValueError(
                "Invalid pressure input. Must be a Pressure object.")
        # ! temperature
        if not isinstance(temperature, Temperature):
            raise ValueError(
                "Invalid temperature input. Must be a Temperature object.")
        # ! model source
        if not isinstance(model_source, ModelSource):
            raise ValueError(
                "Invalid model_source input. Must be a ModelSource object.")

        # NOTE: kwargs
        # phase
        phase = kwargs.get('phase', None)

        # SECTION: initialize eos core
        try:
            # NOTE: thermo manager
            ThermoModelCore_ = ThermoModelCore()
            # NOTE: eos core
            eosCore = ThermoModelCore_.init_eos(**kwargs)
        except Exception as e:
            logger.error(f"Initialization failed!, {e}")
            raise

        # SECTION: input preparation
        try:
            # NOTE component id configuration
            # set component id
            component_id: str = set_component_id(
                component=component,
                component_key=component_key
            )

            # model input
            model_input = {
                "phase": phase,
                "component": component_id,
                "pressure": [pressure.value, pressure.unit],
                "temperature": [temperature.value, temperature.unit],
            }

            # model source
            model_source_dict = {
                "datasource": model_source.data_source,
                "equationsource": model_source.equation_source
            }
        except Exception as e:
            logger.error(f"Input preparation failed!, {e}")
            raise

        # SECTION: calculation
        try:
            # NOTE: gas fugacity calculation method
            res = eosCore.cal_fugacity(
                model_name=model_name,
                model_input=model_input,
                model_source=model_source_dict,
                solver_method=solver_method,
                liquid_fugacity_mode=liquid_fugacity_mode,
                **kwargs
            )

            # ! parse result
            res = parse_liquid_fugacity_calc_result(
                res=res,
                phase_names=phase_names
            )

            return res
        except Exception as e:
            logger.error(f"Calculation failed!, {e}")
            raise
    except Exception as e:
        logger.error(f"Gas fugacity calculation failed!, {e}")
        raise


def calc_mixture_fugacity(
    components: list[Component],
    pressure: Pressure,
    temperature: Temperature,
    model_source: ModelSource,
    model_name: Literal[
        'SRK', 'PR', 'RK', 'vdW'
    ] = 'SRK',
    solver_method: Literal[
        'ls', 'newton', 'fsolve', 'root'
    ] = 'ls',
    liquid_fugacity_mode: Literal[
        'EOS', 'Poynting'
    ] = 'EOS',
    component_key: Literal[
        "Name-State", "Formula-State"
    ] = "Name-State",
    phase_names: List[
        Literal['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']
    ] = ['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID'],
    **kwargs
) -> MixtureGasFugacityResult:
    '''
    Starts calculating fugacity for the single and multi-component systems

    Parameters
    ----------
    components: List[Component]
        component object list containing component information as:
            - name: str,
            - formula: str,
            - state: str, `g`: gas, `l`: liquid, `s`: solid, `aq`: aqueous
            - mole_fraction: float, mole fraction of the component in the mixture
    pressure: Pressure
        Pressure and a unit.
    temperature: Temperature
        Temperature and a unit.
    model_source: ModelSource
        datasource and equationsource needed for fugacity calculation
            - datasource: dict, datasource for the component (`generated by PyThermoDB`)
            - equationsource: dict, equationsource for the component (`generated by PyThermoDB`)
    model_name: str
        eos model name,
            - `SRK`: Soave-Redlich-Kwong
            - `PR`: Peng-Robinson
            - `RK`: Redlich-Kwong
            - `vdW`: Van der Waals
    solver_method: str
        solver method as:
            - `ls`: least square method (default)
            - `root`: root method
            - `newton`: newton method
            - `fsolve`: fsolve method
    liquid_fugacity_mode: str
        liquid fugacity method as:
            - `Poynting`: Poynting method (soon),
            - `EOS`: Equation of state (lowest Z)
    component_key: str
        component key type as:
            - `Name-State`: component name with state, such as `carbon dioxide-g`, `water-l`
            - `Formula-State`: component formula with state, such as `CO2-g`, `H2O-l`
    phase_names: List[Literal['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']]
        list of phase names to consider in the calculation, e.g., ['VAPOR', 'LIQUID', 'SUPERCRITICAL', 'VAPOR-LIQUID']
    **kwargs: Optional[Dict]
        additional arguments
            - tolerance: float, tolerance for the calculation (default: 1e-1)

    Returns
    -------
    res: MixtureGasFugacityResult
        results of fugacity calculation for the mixture.

    Notes
    -----
    ### solver_method:
        - `ls`: least square method
        - `newton`: newton method
        - `fsolve`: fsolve method

    ### root_analysis_set:
        - set [1]: 3 roots (VAPOR-LIQUID)
            - At `T < Tc` and `P = Psat`, 3 real roots → smallest is liquid, largest is vapor (vapor-liquid).
        - set [2]: 1 root (LIQUID)
            - At `T < Tc` and `P > Psat`, EOS may give 1 or 3 roots → use smallest (liquid).
        - set [3]: 1 root (VAPOR)
            - At `T < Tc` and `P < Psat`, EOS may give 1 or 3 roots → use largest (vapor).
        - set [4]: 1 root (SUPERCRITICAL)
            - At `T > Tc`, only 1 real root → fluid is supercritical (vapor-like or liquid-like).
    '''
    try:
        # SECTION: validate inputs
        # ! components
        if not isinstance(components, list) or not all(isinstance(c, Component) for c in components):
            raise ValueError(
                "Invalid components input. Must be a list of Component objects.")
        if len(components) == 0:
            raise ValueError("Components list is empty.")
        # ! pressure
        if not isinstance(pressure, Pressure):
            raise ValueError(
                "Invalid pressure input. Must be a Pressure object.")
        # ! temperature
        if not isinstance(temperature, Temperature):
            raise ValueError(
                "Invalid temperature input. Must be a Temperature object.")
        # ! model source
        if not isinstance(model_source, ModelSource):
            raise ValueError(
                "Invalid model_source input. Must be a ModelSource object.")

        # NOTE: kwargs
        # phase
        phase = kwargs.get('phase', None)

        # SECTION: initialize eos core
        try:
            # NOTE: thermo manager
            ThermoModelCore_ = ThermoModelCore()
            # NOTE: eos core
            eosCore = ThermoModelCore_.init_eos(**kwargs)
        except Exception as e:
            logger.error(f"Initialization failed!, {e}")
            raise

        # SECTION: input preparation
        try:
            # model input
            model_input = {
                "phase": phase,
                "pressure": [pressure.value, pressure.unit],
                "temperature": [temperature.value, temperature.unit],
            }
        except Exception as e:
            logger.error(f"Input preparation failed!, {e}")
            raise

        # SECTION: calculation
        try:
            # NOTE: gas fugacity calculation method
            res = eosCore.calc_fugacity_mixture(
                components=components,
                model_input=model_input,
                model_source=model_source,
                model_name=model_name,
                solver_method=solver_method,
                liquid_fugacity_mode=liquid_fugacity_mode,
                component_key=component_key,
                **kwargs
            )

            # ! parse result
            res = parse_mixture_fugacity_calc_result(
                res=res,
                phase_names=phase_names
            )

            # res
            return res
        except Exception as e:
            logger.error(f"Calculation failed!, {e}")
            raise
    except Exception as e:
        logger.error(f"Mixture fugacity calculation failed!, {e}")
        raise
