# import libs
import logging
from typing import Any, Dict, List, Optional, Tuple, Type, Union, Literal
from pythermodb_settings.models import Component, Temperature, Pressure
from pyThermoLinkDB.models import ModelSource
# local
from ..docs import ThermoModelCore
from ..utils import set_component_id

# NOTE: logger
logger = logging.getLogger(__name__)


def calc_gas_fugacity(
    component: Component,
    pressure: Pressure,
    temperature: Temperature,
    model_source: ModelSource,
    model_name: Literal[
        'SRK', 'PR', 'RK', 'vdW'
    ] = 'SRK',
    solver_method: Literal[
        'ls', 'newton', 'fsolve', 'root'
    ] = 'ls',
    component_key: Literal[
        "Name-State", "Formula-State"
    ] = "Name-State",
    **kwargs
) -> Dict[str, Any]:
    """
    Calculate the gas fugacity using the specified equation of state model.

    Parameters
    ----------
    component: Component
        Component object containing information about the chemical component.
    pressure: Pressure
        Pressure and a unit.
    temperature: Temperature
        Temperature and a unit.
    model_source: ModelSource
        datasource and equationsource needed for fugacity calculation
            - datasource: dict, datasource for the component (`generated by PyThermoDB`)
            - equationsource: dict, equationsource for the component (`generated by PyThermoDB`)
    model_name: str
        eos model name,
            - `SRK`: Soave-Redlich-Kwong
            - `PR`: Peng-Robinson
            - `vdW`: Van der Waals
            - `RK`: Redlich-Kwong
    model_input: dict
        model input
            - `phase` (Optional): str, `VAPOR`: vapor phase, `LIQUID`: liquid phase, `VAPOR-LIQUID`: vapor-liquid phase, `SUPERCRITICAL`: supercritical phase
            - `pressure`: list, pressure and a unit, such as `[1.2*1e5, 'Pa']`
            - `temperature`: list, temperature and a unit, such as `[300, 'K']`
    solver_method: str
        solver method as:
            - `ls`: least square method (default)
            - `root`: root method
            - `newton`: newton method
            - `fsolve`: fsolve method
    component_key: str
        component key type, options are:
            - `Name-State`: component name with state (default)
            - `Formula-State`: component formula with state
    **kwargs: Optional[Dict]
        additional arguments
            - tolerance: float, tolerance for the calculation (default: 1e-1)

    Returns
    -------
    Dict[str, Any]
        A dictionary containing the calculated fugacity coefficients and related information.
    """
    # SECTION: validate inputs
    # ! component
    if not isinstance(component, Component):
        raise ValueError(
            "Invalid component input. Must be a Component object.")
    # ! pressure
    if not isinstance(pressure, Pressure):
        raise ValueError("Invalid pressure input. Must be a Pressure object.")
    # ! temperature
    if not isinstance(temperature, Temperature):
        raise ValueError(
            "Invalid temperature input. Must be a Temperature object.")
    # ! model source
    if not isinstance(model_source, ModelSource):
        raise ValueError(
            "Invalid model_source input. Must be a ModelSource object.")

    # SECTION: initialize eos core
    try:
        # NOTE: thermo manager
        ThermoModelCore_ = ThermoModelCore()
        # NOTE: eos core
        eosCore = ThermoModelCore_.init_eos(**kwargs)
    except Exception as e:
        logger.error(f"Initialization failed!, {e}")
        raise

    # SECTION: input preparation
    try:
        # NOTE component id configuration
        # set component id
        component_id: str = set_component_id(
            component=component,
            component_key=component_key
        )

        # model input
        model_input = {
            "component": component_id,
            "pressure": [pressure.value, pressure.unit],
            "temperature": [temperature.value, temperature.unit],
        }

        # model source
        model_source_dict = {
            "datasource": model_source.data_source,
            "equationsource": model_source.equation_source
        }
    except Exception as e:
        logger.error(f"Input preparation failed!, {e}")
        raise

    # SECTION: calculation
    try:
        # NOTE: gas fugacity calculation method
        res = eosCore.cal_fugacity(
            model_name=model_name,
            model_input=model_input,
            model_source=model_source_dict,
            solver_method=solver_method,
            **kwargs
        )
        return res
    except Exception as e:
        logger.error(f"Calculation failed!, {e}")
        raise

    # Placeholder for actual implementation
    return {"fugacity_coefficients": {}, "details": "Calculation completed."}
